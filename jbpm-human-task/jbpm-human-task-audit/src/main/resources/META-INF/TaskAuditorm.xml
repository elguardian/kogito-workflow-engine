<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd"
  version="2.0">
  <named-query name="getAllTasksEvents">
    <query>select t from TaskEventImpl t where t.taskId = :taskId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  <named-query name="getAllTasksEventsByProcessInstanceId">
    <query>select t from TaskEventImpl t where t.processInstanceId = :processInstanceId</query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>

  <named-query name="getAllBAMTaskSummaries">
    <query>select b from BAMTaskSummaryImpl b where b.taskId = :taskId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  <named-query name="deleteBAMTaskSummariesForTask">
    <query>delete from BAMTaskSummaryImpl b where b.taskId = :taskId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  <named-query name="deleteAllBAMTaskSummaries">
    <query>delete from BAMTaskSummaryImpl b</query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>

  <named-query name="getAllAuditTasks">
    <query>
      select t from AuditTaskImpl t order by t.taskId DESC
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  <named-query name="getAllAuditTasksByStatus">
    <query>
      select t from AuditTaskImpl t where t.actualOwner = :owner and t.status in :statuses order by t.taskId DESC
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>

  <named-query name="getAllAuditTasksByUser">
    <query>
      select t from AuditTaskImpl t where t.actualOwner = :owner order by t.taskId DESC
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  <named-query name="getAllGroupAuditTasksByUser">
    <query>
      select distinct t from AuditTaskImpl t, TaskImpl ti join ti.peopleAssignments.potentialOwners pos
      where (t.actualOwner = null or t.actualOwner = '') and t.status = 'Ready' and ti.id = t.taskId and pos.id in :potentialOwners 
      order by t.taskId DESC
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  <named-query name="getAllAdminAuditTasksByUser">
    <query>
      select distinct t from AuditTaskImpl t, TaskImpl ti join ti.peopleAssignments.businessAdministrators bas
      where ti.id = t.taskId and bas.id in :businessAdmins order by t.taskId DESC
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  <named-query name="getAuditTaskById">
    <query>
      select t from AuditTaskImpl t where t.taskId = :taskId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>

  <named-query name="getTaskInputVariables">
    <query>
      select tv from TaskVariableImpl tv where tv.taskId = :taskId and tv.type = 0
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  
  <named-query name="getTaskOutputVariables">
    <query>
      select tv from TaskVariableImpl tv where tv.taskId = :taskId and tv.type = 1
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>  
  
  <named-query name="TasksByStatusByVariableName">
    <query>
        select distinct 
            new org.jbpm.services.task.query.TaskSummaryImpl(
                t.id,
                t.name,
                t.description,
                t.taskData.status,
                t.priority,
                t.taskData.actualOwner.id,
                t.taskData.createdBy.id,
                t.taskData.createdOn,
                t.taskData.activationTime,
                t.taskData.expirationTime,
                t.taskData.processId,
                t.taskData.processInstanceId,
                t.taskData.parentId,
                t.taskData.deploymentId,
                t.taskData.skipable              )
            from
            TaskImpl t
            join t.peopleAssignments.potentialOwners potentialOwners
            left join t.peopleAssignments.excludedOwners as excludedOwners
            where
            t.id in (select tv.taskId from TaskVariableImpl tv where tv.name like :variableName) and
            t.archived = 0 and            
            (t.taskData.actualOwner.id = :userId or t.taskData.actualOwner is null) and 
            t.taskData.status in (:status) and 
            ( potentialOwners.id = :userId or potentialOwners.id in (:groupIds) ) and 
            (t.peopleAssignments.excludedOwners is empty or excludedOwners.id != :userId)            
            order by t.id DESC
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>

  <named-query name="TasksByStatusByVariableNameAndValue">
    <query>
        select distinct 
            new org.jbpm.services.task.query.TaskSummaryImpl(
                t.id,
                t.name,
                t.description,
                t.taskData.status,
                t.priority,
                t.taskData.actualOwner.id,
                t.taskData.createdBy.id,
                t.taskData.createdOn,
                t.taskData.activationTime,
                t.taskData.expirationTime,
                t.taskData.processId,
                t.taskData.processInstanceId,
                t.taskData.parentId,
                t.taskData.deploymentId,
                t.taskData.skipable              )
            from
            TaskImpl t
            join t.peopleAssignments.potentialOwners potentialOwners
            left join t.peopleAssignments.excludedOwners as excludedOwners
            where
            t.id in (select tv.taskId from TaskVariableImpl tv where tv.name like :variableName and tv.value like :variableValue) and
            t.archived = 0 and            
            (t.taskData.actualOwner.id = :userId or t.taskData.actualOwner is null) and 
            t.taskData.status in (:status) and 
            ( potentialOwners.id = :userId or potentialOwners.id in (:groupIds) ) and 
            (t.peopleAssignments.excludedOwners is empty or excludedOwners.id != :userId)            
            order by t.id DESC
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
</entity-mappings>
