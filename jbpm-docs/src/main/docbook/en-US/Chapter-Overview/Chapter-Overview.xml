<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Overview</title>

  <para>This chapter will give an overview of the various components that are offered as part of the jBPM project.  It will walk through the different phases in the life cycle of a business process, from modeling and deployment to execution and monitoring.</para>

  <section>
    <title>Modeling</title>

    <para>jBPM currently allows users to create and modify business processes using graphical flow charts.  We target both developers and business users, using an Eclipse editors and a web-based editor respectively.  Currently, we offer three options to model your BPMN2 processes.</para>
    <section>
      <title>Drools Flow Eclipse Plugin for creating BPMN2 processes</title>

      <para>This Eclipse plugin allows developers to create, test and debug BPMN2 processes.</para>
      <figure>
        <title>The Drools Flow editor for creating BPMN2 processes</title>
        <mediaobject>
          <imageobject>
	    <imagedata align="center" fileref="images/Chapter-Overview/EclipseFlow.png" format="PNG" role="" />
          </imageobject>
        </mediaobject>
      </figure>

    </section>

    <section>
      <title>New BPMN 2.0 Eclipse Plugin for creating BPMN2 processes</title>

      <para>This new Eclipse plugin is being created to support the full BPMN 2.0 specification.  It is currently still
      under development but can already be used to create executable BPMN2 processes.</para>
      <figure>
        <title>The BPMN 2.0 editor for creating BPMN2 processes</title>
        <mediaobject>
          <imageobject>
	    <imagedata align="center" fileref="images/Chapter-Overview/EclipseJBPM.png" format="PNG" role="" />
          </imageobject>
        </mediaobject>
      </figure>

    </section>

    <section>
      <title>Web-based process modeling using Oryx Designer</title>

      <para>Web-based editing is possible using the Oryx Designer.  This designer is also integrated into Guvnor, 
      the knowledge repository where you can store your processes.  The Designer can be used to view, update or
      create BPMN2 processes.</para>
      <figure>
        <title>The web-based Oryx editor for creating BPMN2 processes</title>
        <mediaobject>
          <imageobject>
	    <imagedata align="center" fileref="images/Chapter-Overview/Designer.png" format="PNG" role="" />
          </imageobject>
        </mediaobject>
      </figure>

    </section>

  </section>

  <section>
    <title>Deployment</title>

    <para>Guvnor can be used as a knowledge repository, for storing your processes, domain model, business rules, etc.
    Guvnor provides a web-based management console for inspecting, modifying and testing your knowledge.  The Oryx Designer
    is integrated with the Guvnor console.  Guvnor also supports collaboration between different users, scenario testing,
    packaging, etc.</para>
  </section>

  <section>
    <title>Execution</title>

    <section>
      <title>Process engine</title>

    <para>The core engine is a lightweight workflow engine in Java:
      <itemizedlist>
        <listitem>native BPMN2 process execution</listitem>
        <listitem>pluggable persistence and transactions</listitem>
        <listitem>audit and history logging</listitem>
        <listitem>based on a generic process engine</listitem>
      </itemizedlist>
    </para>
  <para>We do yet implement all node types and attributes as defined in the BPMN 2.0 specification, but we already support a very significant
  subset, which includes all common node types.  The following list gives an overview of the various elements that can already be
  executed using the BPMN 2.0 XML format:</para>

  <itemizedlist>
    <listitem><emphasis>Flow objects</emphasis>
      <itemizedlist>
        <listitem>Events
          <itemizedlist>
            <listitem>Start Event (None, Conditional, Signal, Message, Timer)</listitem>
            <listitem>End Event (None, Terminate, Error, Escalation, Signal, Message, Compensation)</listitem>
            <listitem>Intermediate Catch Event (Signal, Timer, Conditional, Message)</listitem>
            <listitem>Intermediate Throw Event (None, Signal, Escalation, Message, Compensation)</listitem>
            <listitem>Non-interrupting Boundary Event (Escalation, Timer)</listitem>
            <listitem>Interrupting Boundary Event (Escalation, Error, Timer, Compensation)</listitem>
          </itemizedlist>
        </listitem>
        <listitem>Activities
          <itemizedlist>
            <listitem>Script Task (Java or MVEL expression language)</listitem>
            <listitem>Task</listitem>
            <listitem>Service Task</listitem>
            <listitem>User Task</listitem>
            <listitem>Business Rule Task</listitem>
            <listitem>Manual Task</listitem>
            <listitem>Send Task</listitem>
            <listitem>Receive Task</listitem>
            <listitem>Reusable Sub-Process (Call Activity)</listitem>
            <listitem>Embedded Sub-Process</listitem>
            <listitem>Ad-Hoc Sub-Process</listitem>
            <listitem>Data-Object</listitem>
          </itemizedlist>
        </listitem>
        <listitem>Gateways
          <itemizedlist>
            <listitem>Diverging
              <itemizedlist>
                <listitem>Exclusive (Java, MVEL or XPath expression language)</listitem>
                <listitem>Inclusive (Java, MVEL or XPath expression language)</listitem>
                <listitem>Parallel</listitem>
                <listitem>Event-Based</listitem>
              </itemizedlist>
            </listitem>
            <listitem>Converging
              <itemizedlist>
                <listitem>Exclusive</listitem>
                <listitem>Parallel</listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>Lanes</listitem>
      </itemizedlist>
    </listitem>
    <listitem><emphasis>Data</emphasis>
      <itemizedlist>
        <listitem>Java type language</listitem>
        <listitem>Process properties</listitem>
        <listitem>Embedded Sub-Process properties</listitem>
        <listitem>Activity properties</listitem>
      </itemizedlist>
    </listitem>
    <listitem><emphasis>Connecting objects</emphasis>
      <itemizedlist>
        <listitem>Sequence flow</listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>

    </section>

    <section>
      <title>Human task service</title>

    <para>Human tasks are an important part of a BPM solution. While some of the work performed in a process can be executed
    automatically, some tasks need to be executed with the interaction of human actors. This includes task lists for users,
    claiming and/or assigning tasks, etc.  The process engine itself is not tied to one specific, internal implementation but
    allows for other implementations to be plugged in. By default jBPM currently supports a WS-HT service as the default
    implementation. The life cycle as supported by the Human Task specification is shown below. Note that the WS-HT service
    also includes features like group assignment, escalation, assignment rules, etc.</para>
      <figure>
        <title>The WS-HT human task life cycle</title>
        <mediaobject>
          <imageobject>
	    <imagedata align="center" fileref="images/Chapter-Overview/WS-HT.png" format="PNG" role="" />
          </imageobject>
        </mediaobject>
      </figure>

    <para>User-defined human task forms are also supported using a template-based approach, while a other task form solutions
    can easily be integrated.</para>

    </section>

  </section>

  <section>
    <title>Monitoring</title>

    <para>To monitoring your processes, you first need the ability to know what happening at runtime. Process listeners can be
    used to listen to different kinds of events occuring at runtime, like process instances being started or node instances being
    completed, etc. This information could then be used to create history logs (for reporting or static analysis purposes), or to
    dymanically analyze and respond using Business Activity Monitoring (BAM).</para>

    <section>
      <title>Web-based management console</title>

    <para>Processes can be managed through a web console. This includes features like managing your process instances
    (starting/stopping/inspecting), ...</para>

      <figure>
        <title>Managing your process instances</title>
        <mediaobject>
          <imageobject>
	    <imagedata align="center" fileref="images/Chapter-Overview/ProcessInstanceDiagram.png" format="PNG" role="" />
          </imageobject>
        </mediaobject>
      </figure>

    <para>... inspecting your (human) task list and executing those tasks, ...</para>

      <figure>
        <title>Managing your tasks</title>
        <mediaobject>
          <imageobject>
	    <imagedata align="center" fileref="images/Chapter-Overview/TaskForm.png" format="PNG" role="" />
          </imageobject>
        </mediaobject>
      </figure>

    <para>... and generating reports.</para>

      <figure>
        <title>Generating reports</title>
        <mediaobject>
          <imageobject>
	    <imagedata align="center" fileref="images/Chapter-Overview/ReportProcess.png" format="PNG" role="" />
          </imageobject>
        </mediaobject>
      </figure>

    </section>

  </section>

</chapter>
