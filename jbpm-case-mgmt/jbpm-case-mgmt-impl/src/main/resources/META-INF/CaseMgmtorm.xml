<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd"
  version="2.0">

  <!-- case instance queries -->
  <named-query name="getCaseInstances">

    <query>
      select
      new org.jbpm.casemgmt.impl.model.instance.CaseInstanceImpl(
        log.correlationKey, <!-- case id -->
        log.processInstanceDescription, <!-- case description -->            
        log.processId, <!--case definition  -->
        log.status, <!-- case status -->
        log.externalId, <!-- deployment id -->      
        log.identity, <!-- case owner -->
        log.start, <!-- case start date  -->
        log.end, <!-- case end date  -->
        log.processInstanceId, <!-- case top level process instance id -->
        log.outcome       
      )
      from
        ProcessInstanceLog log
      where 
        log.processType = 2
        and log.status in (:statuses)
      ORDER BY
        log.correlationKey, log.start
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  
  <named-query name="getCaseInstancesByDeployment">

    <query>
      select
      new org.jbpm.casemgmt.impl.model.instance.CaseInstanceImpl(
        log.correlationKey, <!-- case id -->
        log.processInstanceDescription, <!-- case description -->            
        log.processId, <!--case definition  -->
        log.status, <!-- case status -->
        log.externalId, <!-- deployment id -->      
        log.identity, <!-- case owner -->
        log.start, <!-- case start date  -->
        log.end, <!-- case end date  -->
        log.processInstanceId, <!-- case top level process instance id -->
        log.outcome      
      )
      from
        ProcessInstanceLog log
      where 
        log.processType = 2
        and log.externalId =:deploymentId
        and log.status in (:statuses)
        and log.processInstanceId in (select r.processInstanceId from CaseRoleAssignmentLog r where r.entityId in (:entities))
      ORDER BY
        log.correlationKey, log.start
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  
  <named-query name="getCaseInstancesByDefinition">

    <query>
      select
      new org.jbpm.casemgmt.impl.model.instance.CaseInstanceImpl(
        log.correlationKey, <!-- case id -->
        log.processInstanceDescription, <!-- case description -->            
        log.processId, <!--case definition  -->
        log.status, <!-- case status -->
        log.externalId, <!-- deployment id -->      
        log.identity, <!-- case owner -->
        log.start, <!-- case start date  -->
        log.end, <!-- case end date  -->
        log.processInstanceId, <!-- case top level process instance id -->
        log.outcome     
      )
      from
        ProcessInstanceLog log
      where 
        log.processType = 2
        and log.processId =:definitionId
        and log.status in (:statuses)
        and log.processInstanceId in (select r.processInstanceId from CaseRoleAssignmentLog r where r.entityId in (:entities))
      ORDER BY
        log.correlationKey, log.start
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>    

  <named-query name="getCaseInstancesOwnedBy">

    <query>
      select
      new org.jbpm.casemgmt.impl.model.instance.CaseInstanceImpl(
        log.correlationKey, <!-- case id -->
        log.processInstanceDescription, <!-- case description -->            
        log.processId, <!--case definition  -->
        log.status, <!-- case status -->
        log.externalId, <!-- deployment id -->      
        log.identity, <!-- case owner -->
        log.start, <!-- case start date  -->
        log.end, <!-- case end date  -->
        log.processInstanceId, <!-- case top level process instance id -->
        log.outcome    
      )
      from
        ProcessInstanceLog log
      where 
        log.processType = 2
        and log.identity =:owner
        and log.status in (:statuses)
      ORDER BY
        log.correlationKey, log.start
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>

  <named-query name="getCaseInstancesByRole">

    <query>
      select
      new org.jbpm.casemgmt.impl.model.instance.CaseInstanceImpl(
        log.correlationKey, <!-- case id -->
        log.processInstanceDescription, <!-- case description -->            
        log.processId, <!--case definition  -->
        log.status, <!-- case status -->
        log.externalId, <!-- deployment id -->      
        log.identity, <!-- case owner -->
        log.start, <!-- case start date  -->
        log.end, <!-- case end date  -->
        log.processInstanceId, <!-- case top level process instance id -->
        log.outcome    
      )
      from
        ProcessInstanceLog log        
      where         
        log.processType = 2
        and log.status in (:statuses)
        and log.processInstanceId in (select r.processInstanceId from CaseRoleAssignmentLog r where r.roleName =:roleName and r.entityId in (:entities))
      ORDER BY
        log.correlationKey, log.start
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  
  <named-query name="getCaseInstancesAnyRole">

    <query>
      select
      new org.jbpm.casemgmt.impl.model.instance.CaseInstanceImpl(
        log.correlationKey, <!-- case id -->
        log.processInstanceDescription, <!-- case description -->            
        log.processId, <!--case definition  -->
        log.status, <!-- case status -->
        log.externalId, <!-- deployment id -->      
        log.identity, <!-- case owner -->
        log.start, <!-- case start date  -->
        log.end, <!-- case end date  -->
        log.processInstanceId, <!-- case top level process instance id -->
        log.outcome    
      )
      from
        ProcessInstanceLog log        
      where         
        log.processType = 2
        and log.status in (:statuses)
        and log.processInstanceId in (select r.processInstanceId from CaseRoleAssignmentLog r where r.entityId in (:entities))
      ORDER BY
        log.correlationKey, log.start
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>  
  
    
  <named-query name="getCaseInstanceById">
    <query>
     select
      new org.jbpm.casemgmt.impl.model.instance.CaseInstanceImpl(
        log.correlationKey, <!-- case id -->
        log.processInstanceDescription, <!-- case description -->            
        log.processId, <!--case definition  -->
        log.status, <!-- case status -->
        log.externalId, <!-- deployment id -->      
        log.identity, <!-- case owner -->
        log.start, <!-- case start date  -->
        log.end, <!-- case end date  -->
        log.processInstanceId, <!-- case top level process instance id -->
        log.outcome    
      )
      from
        ProcessInstanceLog log
      where
        log.correlationKey =:correlationKey
        and log.status = 1
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  
  <named-query name="getAuthorizationToCaseInstance">
    <query>
     select
        r.entityId
      from
        CaseRoleAssignmentLog r
      where
        r.caseId =:caseId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  
  <named-query name="getAuthorizationToCaseInstanceByRole">
    <query>
     select
        r.entityId
      from
        CaseRoleAssignmentLog r
      where
        r.caseId =:caseId and r.roleName in (:roles)
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>  

  <named-query name="getActiveNodesForCase">

    <query>
      select
      new org.jbpm.kie.services.impl.model.NodeInstanceDesc(
        log.nodeInstanceId,
        log.nodeId,
        log.nodeName,
        log.nodeType,
        log.externalId,
        log.processInstanceId,
        log.date,
        log.connection,
        log.type,
        log.workItemId
      )
      from
        ProcessInstanceLog plog,
        NodeInstanceLog log        
      where 
        plog.correlationKey like :caseId
        and plog.status = 1
        and plog.processInstanceId = log.processInstanceId
        and log.nodeType not in ('StartNode', 'EndNode', 'Split', 'Join')
        and log.nodeInstanceId in ( select nil.nodeInstanceId from NodeInstanceLog nil where nil.processInstanceId=plog.processInstanceId  
                    GROUP BY nil.nodeInstanceId
                    HAVING sum(nil.type) = 0)
        and log.type = 0  
      ORDER BY
        log.processInstanceId, log.nodeInstanceId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  
  <named-query name="getCompletedNodesForCase">
    <query>
      select
      new org.jbpm.kie.services.impl.model.NodeInstanceDesc(
      log.nodeInstanceId,
      log.nodeId,
      log.nodeName,
      log.nodeType,
      log.externalId,
      log.processInstanceId,
      log.date,
      log.connection,
      log.type,
      log.workItemId
      )
      from
        ProcessInstanceLog plog,
        NodeInstanceLog log        
      where 
        plog.correlationKey like :caseId
        and plog.processInstanceId = log.processInstanceId
        and log.nodeType not in ('StartNode', 'EndNode', 'Split', 'Join')
        and log.nodeInstanceId in (select nodeInstanceId from NodeInstanceLog nid where nid.processInstanceId=plog.processInstanceId AND nid.type = 1 
                                GROUP BY nid.nodeInstanceId
                    HAVING sum(nid.type) &gt;= 1)
        and log.type = 1 
      ORDER BY 
        log.processInstanceId, log.nodeInstanceId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>  
  
  <!-- case id info queries -->
  <named-query name="findCaseIdInfoByPrefix">

    <query>
      select
        caseIdInfo
      from
        CaseIdInfo caseIdInfo
      where 
        caseIdInfo.caseIdPrefix = :prefix
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  
    <!-- case id to ksession mapping -->
  <named-query name="findCaseIdContextMapping">

    <query>
      select
        ksessionId
      from
        ContextMappingInfo m
      where 
        m.contextId = :caseId
    </query>
    <!-- hint name="org.hibernate.timeout" value="200"/ -->
  </named-query>
  
  <named-query name="getCaseTasksAsBusinessAdmin">
        <query>
            select distinct 
            new org.jbpm.services.task.query.TaskSummaryImpl(
                t.id,
                t.name,
                t.description,
                t.taskData.status,
                t.priority,
                t.taskData.actualOwner.id,
                t.taskData.createdBy.id,
                t.taskData.createdOn,
                t.taskData.activationTime,
                t.taskData.expirationTime,
                t.taskData.processId,
                t.taskData.processInstanceId,
                t.taskData.parentId,
                t.taskData.deploymentId,
                t.taskData.skipable              )
            from
            TaskImpl t
            join t.peopleAssignments.businessAdministrators businessAdministrators
            where
            t.taskData.processInstanceId in (select log.processInstanceId from ProcessInstanceLog log where log.correlationKey like :caseId) and 
            t.archived = 0 and
            ( businessAdministrators.id = :userId or businessAdministrators.id in (:groupIds) ) and 
            t.taskData.status in (:status) 
           
            order by t.id DESC
        </query>
        <!-- hint name="org.hibernate.timeout" value="200"/ -->
    </named-query>
    
    <named-query name="getCaseTasksAsPotentialOwner">
        <query>
            select distinct 
            new org.jbpm.services.task.query.TaskSummaryImpl(
                t.id,
                t.name,
                t.description,
                t.taskData.status,
                t.priority,
                t.taskData.actualOwner.id,
                t.taskData.createdBy.id,
                t.taskData.createdOn,
                t.taskData.activationTime,
                t.taskData.expirationTime,
                t.taskData.processId,
                t.taskData.processInstanceId,
                t.taskData.parentId,
                t.taskData.deploymentId,
                t.taskData.skipable              )
            from
            TaskImpl t
            join t.peopleAssignments.potentialOwners potentialOwners
            left join t.peopleAssignments.excludedOwners as excludedOwners
            where
            t.taskData.processInstanceId in (select log.processInstanceId from ProcessInstanceLog log where log.correlationKey like :caseId) and
            t.archived = 0 and            
            (t.taskData.actualOwner.id = :userId or t.taskData.actualOwner is null) and 
            t.taskData.status in (:status) and 
            ( potentialOwners.id = :userId or potentialOwners.id in (:groupIds) ) and 
            (t.peopleAssignments.excludedOwners is empty or excludedOwners.id != :userId)
            order by t.id DESC  
        </query>
        <!-- hint name="org.hibernate.timeout" value="200"/ -->
    </named-query>
    
    <named-query name="getCaseTasksAsStakeholder">
        <query>
            select distinct 
            new org.jbpm.services.task.query.TaskSummaryImpl(
                t.id,
                t.name,
                t.description,
                t.taskData.status,
                t.priority,
                t.taskData.actualOwner.id,
                t.taskData.createdBy.id,
                t.taskData.createdOn,
                t.taskData.activationTime,
                t.taskData.expirationTime,
                t.taskData.processId,
                t.taskData.processInstanceId,
                t.taskData.parentId,
                t.taskData.deploymentId,
                t.taskData.skipable              )
            from
            TaskImpl t
            join t.peopleAssignments.taskStakeholders taskStakeholders
            where
            t.taskData.processInstanceId in (select log.processInstanceId from ProcessInstanceLog log where log.correlationKey like :caseId) and
            t.archived = 0 and                        
            t.taskData.status in (:status) and 
            ( taskStakeholders.id = :userId or taskStakeholders.id in (:groupIds) )
            order by t.id DESC  
        </query>
        <!-- hint name="org.hibernate.timeout" value="200"/ -->
    </named-query>

</entity-mappings>