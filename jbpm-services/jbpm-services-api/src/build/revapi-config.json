{
  "filters": {
    "revapi": {
      "java": {
        "filter": {
          "_comment": "We don't want to check transitive classes, e.g. from kie-api, since we already check them in their own module.",
          "packages": {
            "regex": true,
            "include": [
              "org\\.jbpm\\.services\\.api.*"
            ]
          }
        }
      }
    }
  },
  "ignores": {
    "revapi": {
      "_comment": "Changes between 7.11.0.Final and the current branch. These changes are desired and thus ignored.",
      "ignore": [
        {
          "code": "java.method.addedToInterface",
          "new": "method long org.jbpm.services.api.admin.TimerInstance::getId()",
          "package": "org.jbpm.services.api.admin",
          "classSimpleName": "TimerInstance",
          "methodName": "getId",
          "elementKind": "method",
          "justification": "JBPM-7632 - Enhance process definition data including timers and nodes"
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method java.util.Set<org.jbpm.services.api.model.NodeDesc> org.jbpm.services.api.model.ProcessDefinition::getNodes()",
          "package": "org.jbpm.services.api.model",
          "classSimpleName": "ProcessDefinition",
          "methodName": "getNodes",
          "elementKind": "method",
          "justification": "JBPM-7632 - Enhance process definition data including timers and nodes"
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method java.util.Set<org.jbpm.services.api.model.TimerDesc> org.jbpm.services.api.model.ProcessDefinition::getTimers()",
          "package": "org.jbpm.services.api.model",
          "classSimpleName": "ProcessDefinition",
          "methodName": "getTimers",
          "elementKind": "method",
          "justification": "JBPM-7632 - Enhance process definition data including timers and nodes"
        },
        {
          "code": "java.field.enumConstantOrderChanged",
          "old": "field org.jbpm.services.api.query.model.QueryDefinition.Target.CUSTOM",
          "new": "field org.jbpm.services.api.query.model.QueryDefinition.Target.CUSTOM",
          "oldOrdinal": "8",
          "newOrdinal": "9",
          "package": "org.jbpm.services.api.query.model",
          "classSimpleName": "Target",
          "fieldName": "CUSTOM",
          "elementKind": "enumConstant",
          "justification": "JBPM-8155 -Adding new target for custom queries USER_GROUPS_TASK and moving CUSTOM"
        },
        {
          "code": "java.field.enumConstantOrderChanged",
          "old": "field org.jbpm.services.api.query.model.QueryDefinition.Target.USER_GROUPS_TASK",
          "new": "field org.jbpm.services.api.query.model.QueryDefinition.Target.USER_GROUPS_TASK",
          "oldOrdinal": "9",
          "newOrdinal": "8",
          "package": "org.jbpm.services.api.query.model",
          "classSimpleName": "Target",
          "fieldName": "USER_GROUPS_TASK",
          "elementKind": "enumConstant",
          "justification": "JBPM-8155 -Adding new target for custom queries USER_GROUPS_TASK"
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method void org.jbpm.services.api.DeploymentService::undeploy(org.jbpm.services.api.model.DeploymentUnit, java.util.function.Function<org.jbpm.services.api.model.DeploymentUnit, java.lang.Boolean>)",
          "package": "org.jbpm.services.api",
          "classSimpleName": "DeploymentService",
          "methodName": "undeploy",
          "elementKind": "method",
          "justification": "AF-1685: Development Lifecycle Streamline"
        }
      ]
    }
  }
}
